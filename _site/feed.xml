<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FANER ARTIST</title>
    <description>欢迎来到FANER ARTIST个人站</description>
    <link>http://peter2116@github.io/</link>
    <atom:link href="http://peter2116@github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 01 Mar 2018 16:43:28 +0800</pubDate>
    <lastBuildDate>Thu, 01 Mar 2018 16:43:28 +0800</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>排查java应用中的死循环</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;web应用中出现deadloop问题会导致机器cpu飙升，下面是一个常规的排查思路&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;pid&quot;&gt;查找进程pid&lt;/h3&gt;

&lt;p&gt;利用&lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt; 或&lt;code class=&quot;highlighter-rouge&quot;&gt;ps -ef &lt;/code&gt; 或&lt;code class=&quot;highlighter-rouge&quot;&gt;jps&lt;/code&gt; 命令找到吃cpu的pid,我们利用&lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt; &lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/peter2116/ImgRep/master/gitImgRep/1.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到pid为3688的进程导致cpu飙升&lt;/p&gt;

&lt;h3 id=&quot;java&quot;&gt;定位java线程&lt;/h3&gt;
&lt;p&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;top -Hp 3688&lt;/code&gt;定位到导致吃cpu的线程pid
&lt;img src=&quot;https://raw.githubusercontent.com/peter2116/ImgRep/master/gitImgRep/deadloop_3.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
将&lt;code class=&quot;highlighter-rouge&quot;&gt;23694&lt;/code&gt;转化为十六进制为&lt;code class=&quot;highlighter-rouge&quot;&gt;0x5c8e&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;jstack&quot;&gt;jstack获取堆栈信息&lt;/h3&gt;
&lt;p&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;jstack&lt;/code&gt;命令打印出堆栈信息到文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jstack 3688 &amp;gt; 3688.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;定位代码&lt;/h3&gt;
&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;3688.log&lt;/code&gt;中查找pid为&lt;code class=&quot;highlighter-rouge&quot;&gt;0x5c8e&lt;/code&gt;的线程便可定位到相关代码&lt;br /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/peter2116/ImgRep/master/gitImgRep/deadloop_2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://peter2116.github.io&quot;&gt;FANER ARTIST的博客&lt;/a&gt; » &lt;a href=&quot;https://peter2116.github.io/2016/04/ClassVersion/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://peter2116@github.io/2018/03/deadloopcheck/</link>
        <guid isPermaLink="true">http://peter2116@github.io/2018/03/deadloopcheck/</guid>
        
        <category>java</category>
        
        
      </item>
    
      <item>
        <title>nfs 共享文件与挂载</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;机器&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;共享服务器 : 10.110.1.190  
客户端服务器 ： 10.110.1.189
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;服务端共享配置&lt;/h3&gt;
&lt;p&gt;打开配置文件写入要共享的文件夹&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/exports
写入 
/rtweb 10.110.1*(rw,sync,no_root_squash)  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;/rtweb  ==&amp;gt; 要共享的文件件，客户端就可以挂载该目录以及其子目录&lt;br /&gt;
10.110.1.* ==&amp;gt; 指定允许访问的ip,也可指定一个具体ip或者*&lt;br /&gt;
(rw,sync,no_root_squash) ===&amp;gt; 读写权限等&lt;/p&gt;

&lt;h3 id=&quot;nfs190&quot;&gt;重启NFS服务器（190上）&lt;/h3&gt;
&lt;p&gt;如下三个方案选择一个可行的
    service nfs restart&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service nfs stop
service nfs start

/etc/init.d/nfs-kernel-server restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-2&quot;&gt;服务端配置完毕&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;客户端挂载（189上）&lt;/h3&gt;

&lt;h6 id=&quot;rtwebsecuredatatablesdata-189optapacheapache-2215htdocs&quot;&gt;现在要把190上/rtweb/secureData/tablesData 挂载到189/opt/apache/apache-2.2.15/htdocs下&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mount -t nfs 10.110.1.190:/rtweb/secureData/tablesData   /opt/apache/apache-2.2.15/htdocs/tablesData
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;mount -t nfs  ==&amp;gt;挂载命令，表示挂载NFS共享的文件夹&lt;br /&gt;
10.110.1.190:/rtweb/secureData/tablesData ==&amp;gt;  –&amp;gt;服务器端共享的文件夹路径，格式为 IP:/共享文件夹路径&lt;br /&gt;
/opt/apache/apache-2.2.15/htdocs/tablesData ==&amp;gt; 映射到本地的文件夹&lt;/p&gt;

&lt;p&gt;如果出现错误“svc: failed to register lockdv1 RPC service (errno 111)  ”&lt;br /&gt;
执行如下命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; mount -t -o nolock nfs 10.110.1.190:/rtweb/secureData/tablesData   /opt/apache/apache-2.2.15/htdocs/tablesData  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至此完成了190对189的共享
访问189的/opt/apache/apache-2.2.15/htdocs/tablesData
即指向了190的/rtweb/secureData/tablesData&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;客户端卸载&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;umount /opt/apache/apache-2.2.15/htdocs/tablesData  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;umount-xxx-device-is-busy&quot;&gt;如果报错umount: xxx: device is busy&lt;/h6&gt;

&lt;p&gt;查看占用文件的进程号并干掉&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fuser -m -v /opt/apache/apache-2.2.15/htdocs/tablesData
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;或者强制卸载&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; umount -lf /opt/apache/apache-2.2.15/htdocs/tablesData
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
转载请注明：&lt;a href=&quot;https://peter2116.github.io&quot;&gt;FANER ARTIST的博客&lt;/a&gt; » &lt;a href=&quot;https://peter2116.github.io/2016/07/Facade/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Jul 2017 00:00:00 +0800</pubDate>
        <link>http://peter2116@github.io/2017/07/nfs/</link>
        <guid isPermaLink="true">http://peter2116@github.io/2017/07/nfs/</guid>
        
        <category>linux</category>
        
        
      </item>
    
      <item>
        <title>Facade（外观）模式</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/subview/2960561/2960561.htm&quot;&gt;Facade&lt;/a&gt;（外观）模式为子系统中的各类（或结构与方法）提供一个简明一致的界面，隐藏子系统的复杂性，使子系统更加容易使用。它是为子系统中的一组接口所提供的一个一致的界面
应用：重新进行类的设计，将原来分散在源码中的类/结构及方法重新组合，形成新的、统一的接口，供上层应用使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;一个简单的例子&lt;/h3&gt;
&lt;p&gt;在写一个简单的tomcat容器时，需要在一个处理器类ServletProcessor里面把request,response这两个对象传递给Servlet类的service(request, response)方法供servlet开发人员使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;((Servlet)ServletClass.newInstance()).service(request, response);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里的传递的request和response对象由tomcat开发人员创建，除了实现继承自javax.sevrlet.request接口和javax.servlet.response接口的方法外它们还有各自的公共方法，
把这样的对象直接给servlet开发人员存在一个安全隐患，servlet开发人员可以将request，和response对象做向上转型之后调用它们自己的公共方法，但这些方法在servlet中应该是不可用的！ how to awoid this problem?&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;解决方式:&lt;/h3&gt;
&lt;p&gt;我们利用组合的方式分别建立request和response的外观类
它们的结构大致如下
RequestFacade&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class RequestFacade implements ServletRequest {

private Request request;

public RequestFacade(Request request) {
	this.request = request;
}

@Override
public AsyncContext getAsyncContext() {
	return request.getAsyncContext();
}

@Override
public Object getAttribute(String arg0) {		
	return request getAttribute(arg0).;
}
    //省略了ServletRequest接口里的众多方法
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ResponseFacade&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ResponseFacade implements ServletResponse {

private Response response;

public ResponseFacade(Response response) {
	this.response = response;
}

@Override
public void flushBuffer() throws IOException {
	response.flushBuffer();
}
    
    //省略了ServletResponse接口里的众多方法
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后通过request和response初始它们的外观类对象，并把它们的外观类对象传给Service()方法即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RequestFacade requestFacade = new RequestFacade(request);
	ResponseFacade responseFacade = new ResponseFacade(response);
	
	try {
		((Servlet)ServletClass.newInstance()).service(requestFacade, responseFacade);
	} catch (InstantiationException | IllegalAccessException | ServletException | IOException e) {
		PubUtil.error(&quot;ServletProcessor --- process3 ---Exception&quot;+e.getMessage());
		return;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;RequestFacade 外观类包含类request，并且和request类都继承了ServletRequest接口，所以servlet程序员就可以通过外观类来调用ServletRequest接口的所有方法，同时有效屏蔽了request类自己的公共方法。ResponseFacade具有同样的功能。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
转载请注明：&lt;a href=&quot;https://peter2116.github.io&quot;&gt;FANER ARTIST的博客&lt;/a&gt; » &lt;a href=&quot;https://peter2116.github.io/2016/07/Facade/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://peter2116@github.io/2016/07/Facade/</link>
        <guid isPermaLink="true">http://peter2116@github.io/2016/07/Facade/</guid>
        
        <category>design patterns</category>
        
        
      </item>
    
      <item>
        <title>Don&#39;t try to make things perfect one time</title>
        <description>&lt;p&gt;大概一个月前我发现了简书是一个很是适合码字的地方，而且markDown也让我很感兴趣，于是我觉定在简书上写些东西，由于之前的日记文思之类的东西都是记载在豆瓣上，我想把简书作为自己的技术博客也是不错的，然而一个多月过去了，我只在简书上写了一篇markDown的简单语法的记录，一篇博文也没有更新，想来不免对自己有些失望。&lt;/p&gt;

&lt;p&gt;究其缘由，我一直以为这是由于自己懒，是拖延症在作祟，然后就在最近我发现了一个更为深刻的原因，一个很严重的毛病，可能是比拖延症还要严重的毛病。那就是我总想着一次把博文写的精彩而且完美，这致使我多次想动笔写东西都放弃了，其实我不是一个特别懒的人，每当我有感兴趣的东西想要学习，我都会积极的付出时间和精力去学习，然而很多东西似乎都败在了一个开头上，这个败不是由于开头有多难，而是败在我开头就想把事情做的很好很完美，这就经常给我一种错觉：还没有做好开头的准备，要为开头做足够的时间和知识准备，这样一想常常让我放弃了开始的这个念头。&lt;/p&gt;

&lt;p&gt;由此看来，老想一开始就把事情做好，这是一种很严重的症状，暂且叫它“处女症吧”，因为处女座总爱自诩是追求完美的星座，处女症的害处细思恐极，因为它会经常性的扼杀你想要开始一件事情的动力，长此以往，一个人很多比较有难度的目标就很难实现。仔细想想，一下子就把事情做到完美是及不符合事务发展规律的，小到一个任务，大到一个长远规划，都应该是不断摸索不断改进的状态中趋于完美的，所以必须除掉处女症这种病态思维，人才能够正事自己的局限，才能在不断摸索中完成自己的一个个目标，从而不断进步。&lt;/p&gt;

&lt;p&gt;最近想要学习LINUX操作系统，还有写一个简单的应用服务器，暂且就从这两件事开始克服处女症吧。
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://peter2116.github.io&quot;&gt;FANER ARTIST的博客&lt;/a&gt; » &lt;a href=&quot;https://peter2116.github.io/2016/07/lzayThinking/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 07 Jun 2016 19:15:06 +0800</pubDate>
        <link>http://peter2116@github.io/2016/06/lazyThinking/</link>
        <guid isPermaLink="true">http://peter2116@github.io/2016/06/lazyThinking/</guid>
        
        <category>IT</category>
        
        
      </item>
    
      <item>
        <title>makdown is interesting</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;一级标题&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;二级标题&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;三级标题&lt;/h3&gt;

&lt;h3 id=&quot;section-3&quot;&gt;列表&lt;/h3&gt;

&lt;h4 id=&quot;section-4&quot;&gt;无序列表&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
  &lt;li&gt;3
####有序列表
    &lt;ol&gt;
      &lt;li&gt;1&lt;/li&gt;
      &lt;li&gt;2&lt;/li&gt;
      &lt;li&gt;3&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里是引用的内容
引用内引用
方式发&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;这是粗体&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;这是斜体&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;下面是代码(行内代码)&lt;/h3&gt;
&lt;p&gt;比如说&lt;code class=&quot;highlighter-rouge&quot;&gt;mai(String[] args)&lt;/code&gt;函数
###分割线
***&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;四个空格自动解析为代码(代码块)&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static void main(String[] args)

{
System.out.println(&quot;Hello MarkDown&quot;);
System.out.println(&quot;Hello MarkDown&quot;);
System.out.println(&quot;Hello MarkDown&quot;);
System.out.println(&quot;Hello MarkDown&quot;);
System.out.println(&quot;Hello MarkDown&quot;);
System.out.println(&quot;Hello MarkDown&quot;);
System.out.println(&quot;Hello MarkDown&quot;);
System.out.println(&quot;Hello MarkDown&quot;);
System.out.println(&quot;Hello MarkDown&quot;);
} #### 反斜杠插入特殊字符 \* \# &amp;lt;br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-7&quot;&gt;另一代码区测试&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;try {
            int a = rckMapper.SumDayRckStock(paraMap);  //汇总日进货成本和数量
            int b = rckMapper.SumDayRckSal(paraMap);  //汇总日销售成本
            int c = rckMapper.SumDayRckChange(paraMap);  //汇总日损益成本
            int d = rckMapper.calDayRckCstPrice(paraMap); //汇总日成本单价
            int e = rckMapper.calDayRckMultiCstPrice(paraMap);  //汇总销售成本、调整成本、结存成本
            int f = rckMapper.updStoCostprice(paraMap); //更新库存成本单价
            
        System.out.println(&quot;|&quot; + a + &quot;|&quot;
                + b + &quot;|&quot;
                + c + &quot;|&quot;
                + d + &quot;|&quot;
                + e + &quot;|&quot;
                + f + &quot;|&quot;);
    }
    catch (Exception e) {
        // TODO: handle exception
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://peter2116.github.io&quot;&gt;FANER ARTIST的博客&lt;/a&gt; » &lt;a href=&quot;https://peter2116.github.io/2016/06/MarkDown/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 02 Jun 2016 19:15:06 +0800</pubDate>
        <link>http://peter2116@github.io/2016/06/MarkDown/</link>
        <guid isPermaLink="true">http://peter2116@github.io/2016/06/MarkDown/</guid>
        
        <category>IT</category>
        
        
      </item>
    
      <item>
        <title>macOs mysql安装与卸载</title>
        <description>&lt;h3 id=&quot;mysql&quot;&gt;安装MySql服务&lt;/h3&gt;

&lt;h3 id=&quot;root-&quot;&gt;切换到root 用户&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo -i
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;usrlocal&quot;&gt;解压安装包并移动到指定了路径/usr/local&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar -zxvf mysql-5.7.13-osx10.11-x86_64.tar  
sudo mv mysql-5.7.13-osx10.11-x86_64 /usr/local/mysql  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;更改目录的用户和用户组&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /usr/local   
sudo chown -R root:wheel mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;binmysqld&quot;&gt;执行bin目录下的mysqld脚本完成初始化(创建默认配置文件、授权表等)&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /usr/local/mysql  
sudo bin/mysqld --initialize --user=mysql   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行完成之后会root用户随机分配一个密码,这个密码需要记录好，以备用来登录后修改root密码。&lt;br /&gt;
一般会显示：2017-04-20T06:10:09.073666Z 1 [Note] A temporary password is generated for root@localhost: BxnS&amp;lt;&amp;gt;qpD8E4, BxnS&amp;lt;&amp;gt;qpD8E4这个就是root用户分配的随机密码&lt;br /&gt;
如果之后找不到，尝试到mysql/data 路径下的XXX.err文件内找&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;安装完成后常用的一些脚本&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /usr/local/mysql   
启动        
sudo support-files/mysql.server start     
重启      
sudo support-files/mysql.server restart      
停止      
sudo support-files/mysql.server stop      
检查 MySQL 运行状态         
sudo support-files/mysql.server status      
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mysqlbinsupport-filespath&quot;&gt;为了方便可以将mysql的bin，和support-files添加到PATH&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export  PATH=$PATH:/usr/local/mysql/support-files
export  PATH=$PATH:/usr/local/mysql/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;mysql-1&quot;&gt;mysql卸载&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rm /usr/local/mysql
sudo rm -rf /usr/local/mysql*
sudo rm -rf /Library/StartupItems/MySQLCOM
sudo rm -rf /Library/PreferencePanes/My*
vim /etc/hostconfig  (and removed the line MYSQLCOM=-YES-)
rm -rf ~/Library/PreferencePanes/My*
sudo rm -rf /Library/Receipts/mysql*
sudo rm -rf /Library/Receipts/MySQL*
sudo rm -rf /var/db/receipts/com.mysql.*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
转载请注明：&lt;a href=&quot;https://peter2116.github.io&quot;&gt;FANER ARTIST的博客&lt;/a&gt; » &lt;a href=&quot;https://peter2116.github.io/2016/07/Facade/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 02 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://peter2116@github.io/2016/04/MysqlServiceOnMac/</link>
        <guid isPermaLink="true">http://peter2116@github.io/2016/04/MysqlServiceOnMac/</guid>
        
        <category>mysql</category>
        
        
      </item>
    
      <item>
        <title>class文件版本问题</title>
        <description>&lt;h2 id=&quot;class&quot;&gt;class文件版本问题&lt;/h2&gt;

&lt;h5 id=&quot;jdkclassjdk&quot;&gt;高版本jdk编译的class文件在低版本的jdk下有时会不支持，报异常&lt;/h5&gt;
&lt;p&gt;java.lang.UnsupportedClassVersionError&lt;/p&gt;

&lt;p&gt;major version 和jdk版本对关系如下&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Major version&lt;/th&gt;
      &lt;th&gt;Java&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;46&lt;/td&gt;
      &lt;td&gt;Java 1.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;47&lt;/td&gt;
      &lt;td&gt;Java 1.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;48&lt;/td&gt;
      &lt;td&gt;Java 1.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;49&lt;/td&gt;
      &lt;td&gt;Java 5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;Java 6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;51&lt;/td&gt;
      &lt;td&gt;Java 7&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;class-1&quot;&gt;查看class文件版本方法&lt;/h5&gt;

&lt;p&gt;cd 到class文件所在路径&lt;br /&gt;
执行 javap -verbose XXX.class&lt;br /&gt;
会看到如下结果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2439972-52678ecc1f13e99b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;转载请注明：&lt;a href=&quot;https://peter2116.github.io&quot;&gt;FANER ARTIST的博客&lt;/a&gt; » &lt;a href=&quot;https://peter2116.github.io/2016/04/ClassVersion/&quot;&gt;点击阅读原文&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 02 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://peter2116@github.io/2016/04/ClassVersion/</link>
        <guid isPermaLink="true">http://peter2116@github.io/2016/04/ClassVersion/</guid>
        
        <category>java</category>
        
        
      </item>
    
  </channel>
</rss>
